version: 2.1
commands:
  install-dep:
    parameters:
      path:
        type: string
    steps:
      - run:
          name: npm install
          working_directory: ./<< parameters.path >>
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.path >>/node_modules

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: test-frontend build
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: test-backend build
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: scan-frontend build
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: scan-backend build
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      #  - run:
      #     name: Add backend IP to inventory file & memstash
      #     command: |
      #       backend_ip=$(aws ec2 describe-instances \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --filters "Name=tag:Name,Values=backend-nguyents2" \
      #         --output text)
      #       echo Backend IP: $backend_ip
      #       echo $backend_ip >> ./.circleci/ansible/inventory.txt
      #       cat ./.circleci/ansible/inventory.txt
      #       curl -H "Content-Type: text/plain" -H "token: dd8404ce-b1ff-4441-8c72-1765aeb9f088" \
      #         --request PUT --data "$backend_ip" https://api.memstash.io/values/backend_ip
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - .circleci/ansible/inventory.txt
      
  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    environment:
      ENVIRONMENT: "production"
      TYPEORM_CONNECTION: ${TYPEORM_CONNECTION}
      TYPEORM_HOST: ${TYPEORM_HOST}
      TYPEORM_USERNAME: ${TYPEORM_USERNAME}
      TYPEORM_PASSWORD: ${TYPEORM_PASSWORD}
      TYPEORM_DATABASE: ${TYPEORM_DATABASE}
      TYPEORM_PORT: ${TYPEORM_PORT}
      TYPEORM_ENTITIES: ${TYPEORM_ENTITIES}
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["66:17:29:67:33:4e:b0:bb:27:da:59:63:98:4e:7c:f6:de:44:d9:ed"]
      - attach_workspace:
          at: .
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Install curl
          command: |
            apk add --update curl
      - run:
          name: Configure backend server
          working_directory: ./.circleci/ansible
          command: |
            backend_ip=$(curl -H "token: dd8404ce-b1ff-4441-8c72-1765aeb9f088" \
              --request GET https://api.memstash.io/values/backend_ip)
            cat inventory.txt
            echo Backend IP: $backend_ip
            ansible-playbook -i inventory.txt configure-server.yml --extra-vars "backend_ip=$backend_ip"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install-dep:
          path: backend
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migration_status
            cat migration_status
      - run:
          name: Check migration result and send to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "Migration was successful!"
              curl -H "Content-Type: text/plain" -H "token: dd8404ce-b1ff-4441-8c72-1765aeb9f088" \
              --request PUT --data "success" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "Migration failed"
              curl -H "Content-Type: text/plain" -H "token: dd8404ce-b1ff-4441-8c72-1765aeb9f088" \
              --request PUT --data "failure" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Install tar
          command: |
            yum install -y tar gzip
      - run:
          name: Get backend URL
          working_directory: ./frontend
          command: |
            backend_dns=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            export API_URL="http://${backend_dns}:3030"
            echo ENVIRONMENT=production > ".env"
            echo NODE_ENV=production >> ".env"
            echo API_URL=$API_URL >> ".env"
            cat .env
            npm install
            npm run build
      - run:
          name: Deploy frontend object to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["66:17:29:67:33:4e:b0:bb:27:da:59:63:98:4e:7c:f6:de:44:d9:ed"]
      - attach_workspace:
          at: .
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Install curl
          command: |
            apk add --update curl
      - run:
          name: Install nodejs, npm, rsync, openssh
          command: |
            apk add --update nodejs npm rsync openssh
      - run:
          name: Dump variables to file
          working_directory: ./backend
          command: |
            echo ENVIROMENT=production >> ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=${TYPEORM_HOST} >> ".env"
            echo TYPEORM_PORT=${TYPEORM_PORT} >> ".env"
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> ".env"
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> ".env"
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> ".env"
      - run:
          name: Build backend
          working_directory: ./backend
          command: |
            npm install
            npm run build
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
#  configure-infrastructure:
#      docker:
#       - image: python:3.9.0-alpine
#     environment:
#       ENVIRONMENT: "production"
#       TYPEORM_CONNECTION: ${TYPEORM_CONNECTION}
#       TYPEORM_HOST: ${TYPEORM_HOST}
#       TYPEORM_USERNAME: ${TYPEORM_USERNAME}
#       TYPEORM_PASSWORD: ${TYPEORM_PASSWORD}
#       TYPEORM_DATABASE: ${TYPEORM_DATABASE}
#       TYPEORM_PORT: ${TYPEORM_PORT}
#       TYPEORM_ENTITIES: ${TYPEORM_ENTITIES}
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["66:17:29:67:33:4e:b0:bb:27:da:59:63:98:4e:7c:f6:de:44:d9:ed"]
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install ansible
#           command: |
#             apk add --update ansible
#             ansible --version
#       - run:
#           name: Install curl
#           command: |
#             apk add --update curl
#       - run:
#           name: Configure backend server
#           working_directory: ./.circleci/ansible
#           command: |
#             backend_ip=$(curl -H "token: dd8404ce-b1ff-4441-8c72-1765aeb9f088" \
#               --request GET https://api.memstash.io/values/backend_ip)
#             cat inventory.txt
#             echo Backend IP: $backend_ip
#             ansible-playbook -i inventory.txt configure-server.yml --extra-vars "backend_ip=$backend_ip"

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #   - checkout
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           # Run and save the migration output
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here
  #           exit 1
  #    # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]